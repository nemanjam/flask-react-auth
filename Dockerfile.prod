# build
FROM node:18-alpine as build-react
WORKDIR /app

ENV PATH /app/node_modules/.bin:$PATH
ENV NODE_ENV production
ENV REACT_APP_API_SERVICE_URL $REACT_APP_API_SERVICE_URL

COPY ./services/client/package*.json ./
RUN npm install
RUN npm install react-scripts@5.0.1

COPY ./services/client/ .
RUN rm .eslintrc.json
RUN npm run build

# production
# installed python in nginx image
# copy react app in nginx/html
FROM nginx:stable-alpine as production
WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV FLASK_ENV=production
ENV APP_SETTINGS=src.config.ProductionConfig

RUN apk update && \
    apk add --no-cache --virtual build-deps \
    openssl-dev libffi-dev gcc python3-dev musl-dev g++ \
    postgresql-dev netcat-openbsd

# install and update pip
RUN python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --upgrade pip setuptools && \
    # point pip to pip3, ln - symlink
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
    # point python to python3, ln - symlink
    if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
    rm -r /root/.cache

COPY --from=build-react /app/build /usr/share/nginx/html
COPY ./services/nginx/default.conf /etc/nginx/conf.d/default.conf

COPY ./services/users/requirements.txt ./
RUN pip install -r requirements.txt
RUN pip install gunicorn

COPY ./services/users .

# run gunicorn in background
CMD gunicorn -b 0.0.0.0:5000 manage:app --daemon && \
      # replace $PORT placeholder with $PORT env var value in default.conf file
      sed -i -e 's/$PORT/'"$PORT"'/g' /etc/nginx/conf.d/default.conf && \
      # run nginx in foreground
      nginx -g 'daemon off;'

# Nginx acts as a reverse proxy to the Gunicorn server 